/*
 * This file is generated by jOOQ.
 */
package io.remicro.saga.entities.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.remicro.saga.entities.tables.Databasechangeloglock;
import io.remicro.saga.entities.tables.records.DatabasechangeloglockRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;


import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatabasechangeloglockDao extends AbstractReactiveVertxDAO<DatabasechangeloglockRecord, io.remicro.saga.entities.tables.pojos.Databasechangeloglock, Integer, Future<List<io.remicro.saga.entities.tables.pojos.Databasechangeloglock>>, Future<io.remicro.saga.entities.tables.pojos.Databasechangeloglock>, Future<Integer>, Future<Integer>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DatabasechangeloglockRecord,io.remicro.saga.entities.tables.pojos.Databasechangeloglock,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public DatabasechangeloglockDao(Configuration configuration, io.reactiverse.pgclient.PgClient delegate) {
        super(Databasechangeloglock.DATABASECHANGELOGLOCK, io.remicro.saga.entities.tables.pojos.Databasechangeloglock.class, new ReactiveClassicQueryExecutor<DatabasechangeloglockRecord,io.remicro.saga.entities.tables.pojos.Databasechangeloglock,Integer>(configuration,delegate,io.remicro.saga.entities.tables.mappers.RowMappers.getDatabasechangeloglockMapper()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(io.remicro.saga.entities.tables.pojos.Databasechangeloglock object) {
        return object.getId();
    }

    /**
     * Find records that have <code>locked IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Databasechangeloglock>> findManyByLocked(List<Boolean> values) {
        return findManyByCondition(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKED.in(values));
    }

    /**
     * Find records that have <code>lockgranted IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Databasechangeloglock>> findManyByLockgranted(List<Timestamp> values) {
        return findManyByCondition(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKGRANTED.in(values));
    }

    /**
     * Find records that have <code>lockedby IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Databasechangeloglock>> findManyByLockedby(List<String> values) {
        return findManyByCondition(Databasechangeloglock.DATABASECHANGELOGLOCK.LOCKEDBY.in(values));
    }

    @Override
    public ReactiveClassicQueryExecutor<DatabasechangeloglockRecord,io.remicro.saga.entities.tables.pojos.Databasechangeloglock,Integer> queryExecutor(){
        return (ReactiveClassicQueryExecutor<DatabasechangeloglockRecord,io.remicro.saga.entities.tables.pojos.Databasechangeloglock,Integer>) super.queryExecutor();
    }
}
