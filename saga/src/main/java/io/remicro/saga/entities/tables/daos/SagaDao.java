/*
 * This file is generated by jOOQ.
 */
package io.remicro.saga.entities.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.remicro.saga.entities.tables.Saga;
import io.remicro.saga.entities.tables.records.SagaRecord;

import java.sql.Timestamp;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Configuration;


import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SagaDao extends AbstractReactiveVertxDAO<SagaRecord, io.remicro.saga.entities.tables.pojos.Saga, UUID, Future<List<io.remicro.saga.entities.tables.pojos.Saga>>, Future<io.remicro.saga.entities.tables.pojos.Saga>, Future<Integer>, Future<UUID>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<SagaRecord,io.remicro.saga.entities.tables.pojos.Saga,UUID> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public SagaDao(Configuration configuration, io.reactiverse.pgclient.PgClient delegate) {
        super(Saga.SAGA, io.remicro.saga.entities.tables.pojos.Saga.class, new ReactiveClassicQueryExecutor<SagaRecord,io.remicro.saga.entities.tables.pojos.Saga,UUID>(configuration,delegate,io.remicro.saga.entities.tables.mappers.RowMappers.getSagaMapper()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected UUID getId(io.remicro.saga.entities.tables.pojos.Saga object) {
        return object.getId();
    }

    /**
     * Find records that have <code>title IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Saga>> findManyByTitle(List<String> values) {
        return findManyByCondition(Saga.SAGA.TITLE.in(values));
    }

    /**
     * Find records that have <code>owner_id IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Saga>> findManyByOwnerId(List<UUID> values) {
        return findManyByCondition(Saga.SAGA.OWNER_ID.in(values));
    }

    /**
     * Find records that have <code>created_at IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Saga>> findManyByCreatedAt(List<Timestamp> values) {
        return findManyByCondition(Saga.SAGA.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>updated_at IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Saga>> findManyByUpdatedAt(List<Timestamp> values) {
        return findManyByCondition(Saga.SAGA.UPDATED_AT.in(values));
    }

    @Override
    public ReactiveClassicQueryExecutor<SagaRecord,io.remicro.saga.entities.tables.pojos.Saga,UUID> queryExecutor(){
        return (ReactiveClassicQueryExecutor<SagaRecord,io.remicro.saga.entities.tables.pojos.Saga,UUID>) super.queryExecutor();
    }
}
