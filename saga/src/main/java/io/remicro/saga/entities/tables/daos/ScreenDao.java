/*
 * This file is generated by jOOQ.
 */
package io.remicro.saga.entities.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.remicro.saga.entities.tables.Screen;
import io.remicro.saga.entities.tables.records.ScreenRecord;

import java.sql.Timestamp;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Configuration;


import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.reactivepg.ReactiveClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScreenDao extends AbstractReactiveVertxDAO<ScreenRecord, io.remicro.saga.entities.tables.pojos.Screen, UUID, Future<List<io.remicro.saga.entities.tables.pojos.Screen>>, Future<io.remicro.saga.entities.tables.pojos.Screen>, Future<Integer>, Future<UUID>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<ScreenRecord,io.remicro.saga.entities.tables.pojos.Screen,UUID> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the POSTGREs types.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public ScreenDao(Configuration configuration, io.reactiverse.pgclient.PgClient delegate) {
        super(Screen.SCREEN, io.remicro.saga.entities.tables.pojos.Screen.class, new ReactiveClassicQueryExecutor<ScreenRecord,io.remicro.saga.entities.tables.pojos.Screen,UUID>(configuration,delegate,io.remicro.saga.entities.tables.mappers.RowMappers.getScreenMapper()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected UUID getId(io.remicro.saga.entities.tables.pojos.Screen object) {
        return object.getId();
    }

    /**
     * Find records that have <code>owner_id IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Screen>> findManyByOwnerId(List<UUID> values) {
        return findManyByCondition(Screen.SCREEN.OWNER_ID.in(values));
    }

    /**
     * Find records that have <code>original IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Screen>> findManyByOriginal(List<String> values) {
        return findManyByCondition(Screen.SCREEN.ORIGINAL.in(values));
    }

    /**
     * Find records that have <code>scaled IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Screen>> findManyByScaled(List<String> values) {
        return findManyByCondition(Screen.SCREEN.SCALED.in(values));
    }

    /**
     * Find records that have <code>created_at IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Screen>> findManyByCreatedAt(List<Timestamp> values) {
        return findManyByCondition(Screen.SCREEN.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>updated_at IN (values)</code> asynchronously
     */
    public Future<List<io.remicro.saga.entities.tables.pojos.Screen>> findManyByUpdatedAt(List<Timestamp> values) {
        return findManyByCondition(Screen.SCREEN.UPDATED_AT.in(values));
    }

    @Override
    public ReactiveClassicQueryExecutor<ScreenRecord,io.remicro.saga.entities.tables.pojos.Screen,UUID> queryExecutor(){
        return (ReactiveClassicQueryExecutor<ScreenRecord,io.remicro.saga.entities.tables.pojos.Screen,UUID>) super.queryExecutor();
    }
}
